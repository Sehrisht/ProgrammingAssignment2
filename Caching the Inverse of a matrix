## Caching the Inverse of a Matrix:
## The inverse of a matrix plays the same role as in the reciprocal of a number or in division does in aritihmetic mean.
## This function generates a special "Matrix" that can cache its inverse.

makeCacheMatrix <-function(x = matrix()) {
        inv <- NULL
        set <- function(y) {
               x <<- y
               inv <<- NULL
        }
        get <- function() x
        setInverse <- function(inverse) inv <<- inverse
        getInverse <- function() inv
        list( set = set,
              get = get,
              setInverse = setInverse,
              getInverse = getInverse)
}

## This function generates the inverse of a special "matrix" created by 
## MakeCacheMatrix above. If the inverse has already been created and the matrix has not been changed,
## then it should retrive the inverse from the cache.
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        inv <- x$getInverse()
        if (!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        mat <- x$get()
        inv <- solve(mat, ...)
        x$setInverse(inv)
        inv
}          
